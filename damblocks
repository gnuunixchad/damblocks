#!/bin/env sh
# Pure POSIX plain text bar generator with signal support
# Works with any bar taking stdin as plain text
# @author nate zhou
# @since 2025
# Fork of sbar(https://github.com/pystardust/sbar) with custom modules.
# Some function depends on my personal scripts for updating/caching/signaling,
#    on [codeberg](https://codeberg.org/unixchad/dotfiles)
#    and [github](https://github.com/gnuunixchad/dotfiles)

set -x
# INI
printf "$$" > "${XDG_RUNTIME_DIR}/damblocks.pid"
sec=0

# MODULES
update_time () {
    local icon=""
    case "$(date +'%I')" in
        01) icon="󱐿" ;;
        02) icon="󱑀" ;;
        03) icon="󱑁" ;;
        04) icon="󱑂" ;;
        05) icon="󱑃" ;;
        06) icon="󱑄" ;;
        07) icon="󱑅" ;;
        08) icon="󱑆" ;;
        09) icon="󱑇" ;;
        10) icon="󱑈" ;;
        11) icon="󱑉" ;;
        12) icon="󱑊" ;;
    esac
	time="$icon $(date '+%b-%d %a %H:%M')"
}

update_battery () {
    local icon=""
    local BAT="BAT?"
    local POWER="/sys/class/power_supply"
    local status="$(cat $POWER/$BAT/status)"
    local level="$(cat $POWER/$BAT/capacity)"
    case "$status" in
        "Discharging")
            case "$level" in
                [0-5]) icon="󰂎";;
                [6-9]) icon="󰁺";;
                1[0-9]) icon="󰁻";;
                2[0-9]) icon="󰁼";;
                3[0-9]) icon="󰁽";;
                4[0-9]) icon="󰁽";;
                5[0-9]) icon="󰁾";;
                6[0-9]) icon="󰁿";;
                7[0-9]) icon="󰂀";;
                8[0-9]) icon="󰂁";;
                9[0-9]) icon="󰂂";;
                100)    icon="󰁹";;
            esac
            ;;
        "Not charging")
            icon=""
            ;;
        "Charging")
            icon=""
            ;;
    esac
    battery="${icon}${level}%"
}

update_bluetooth() {
    local icon="󰂯"
    if ! pgrep -x bluetoothd >/dev/null; then
        icon="󰂲"
    else
        local level="$(bluetoothctl info | grep -m1 'Battery Percentage' | awk -F'[()]' '{print $2}')"
        [ -n "$level" ] && icon="󰂱" level=$level%
    fi
    bluetooth="${icon}${level}"
}

# For audio & brightness modules, save to XDG_CACHE_HOME for reboot consistency
update_volume() {
    local level=$(cat "${XDG_CACHE_HOME}/audio-@DEFAULT_AUDIO_SINK@.level")
    local muted=$(cat "${XDG_CACHE_HOME}/audio-@DEFAULT_AUDIO_SINK@.muted")
    [ -z "$muted" ] && icon="" || icon=""
    volume="${icon}${level}%"
}

update_microphone() {
    local level=$(cat "${XDG_CACHE_HOME}/audio-@DEFAULT_AUDIO_SOURCE@.level")
    local muted=$(cat "${XDG_CACHE_HOME}/audio-@DEFAULT_AUDIO_SOURCE@.muted")
    [ -z "$muted" ] && icon="" || icon=""
    microphone="${icon}${level}%"
}

update_brightness() {
    local icon=""
    local level="$(cat ${XDG_CACHE_HOME}/brightness.level)"
    case $level in
        [0-9]) icon="󱩎" ;;
        1[0-9]) icon="󱩏" ;;
        2[0-9]) icon="󱩐" ;;
        3[0-9]) icon="󱩐" ;;
        4[0-9]) icon="󱩑" ;;
        5[0-9]) icon="󱩒" ;;
        6[0-9]) icon="󱩓" ;;
        7[0-9]) icon="󱩔" ;;
        8[0-9]) icon="󱩕" ;;
        9[0-9]) icon="󱩖" ;;
        100%)     icon="󰛨"  ;;
    esac
    brightness="${icon}${level}%"
}

update_ethernet() {
    local status="$(cat /sys/class/net/e*/operstate 2>/dev/null)"
    local icon="󰛳"
    [ "$status" != "up" ] && icon="󰲛"
    ethernet="$icon"
}

update_wifi() {
    local status="$(cat /sys/class/net/w*/operstate 2>/dev/null)"
    local level="$(awk '/^\s*w/ {print int($3 * 100 / 70)"%"}' /proc/net/wireless)"
    [ "$status" = "up" ] && icon="󰖩" || icon="󰖪" level=""
    wifi="${icon}${level}"
}

update_temperature() {
    local icon=""
    local THERMEL="/sys/class/thermal/thermal_zone0/temp"
    local value="$(sed 's/000$//' "$THERMEL")"
    [ -z "$value" ] && icon="󱔱" temperature=""
    [ "$value" -lt 40 ] && icon=""
    [ "$value" -lt 60 ] && icon=""
    [ "$value" -lt 80 ] && icon=""
    [ "$value" -ge 80 ] && icon=""
    temperature="${icon}${value}℃"
}

update_fanmode() {
    local icon="󰈐"
    local rpm="?"
    local POLICY_ASUS=/sys/devices/platform/asus-nb-wmi/throttle_thermal_policy
    local POLICY_IBM=/proc/acpi/ibm/fan
    if [ -f "$POLICY_ASUS" ]; then
        rpm="$(cat /sys/module/asus_wmi/drivers/platform:asus-nb-wmi/asus-nb-wmi/hwmon/hwmon?/fan1_input)"
        case "$(cat $POLICY_ASUS)" in
            0) icon="󱜝" ;; # balanced
            1) icon="󱑯" ;; # performance
            2) icon="󱑰" ;; # silent
        esac
    elif [ -f "$POLICY_IBM" ]; then
        [ "$(grep 'level:' "$POLICY_IBM" | awk '{print $2}')" -eq 0 ] && icon="󱜝"
        rpm="$(grep 'speed:' "$POLICY_IBM" | awk '{print $2}')"
    fi
    fanmode="${icon}${rpm}"
}

update_cpu() {
    local usage="$(mpstat --dec=0 | awk 'NR==4 {print 100 - $NF}')"
    local icon=""
    cpu="${icon}${usage}%"
}

update_memory() {
    local usage="$(command free | awk '/Mem:/ {printf "%.0f\n", $3/$2 * 100}')"
    local icon=""
    memory="${icon}${usage}%"
}

update_home() {
    local usage="$(command df /home | awk 'NR==2 {print $5}' | tr -d '%')"
    local icon=""
    home="${icon}${usage}%"
}

update_root() {
    local usage="$(command df / | awk 'NR==2 {print $5}' | tr -d '%')"
    local icon=""
    root="${icon}${usage}%"
}

#update_usb() {
#    result="$(lsblk -o 'tran' | grep usb | wc -l)"
#    icon=""
#    usb="$icon$result"
#}

update_uptime() {
    local result="$(uptime -p | sed 's/up //; s/ week\(s\)\?/w/; s/ day\(s\)\?/d/; s/ hour\(s\)\?/h/; s/[0-9]* minute.*//; s/,//g; s/ $//; s/ / /;')"
    local icon=""
    [ -n "$result" ] && uptime="${icon}${result}" || uptime="$icon ≤1h"
}

update_ttylogin() {
    local count="$(w -h | wc -l )"
    local icon=""
    ttylogin="${icon}${count}"
}

update_pacman() {
    local result="$(cat $HOME/.cache/checkupdates-cron.num)"
    local icon=""
    pacman="${icon}${result}"
}

update_mutt() {
    local MAIL_DIR="$HOME/doc/mail"
    local MBSYNC_CACHE="${XDG_RUNTIME_DIR}/mbsync-cron"
    local UPDATE_MUTT_FREQUENCY=1800 # in seconds
    local update_mutt_time="$(stat -c "%Y" "$MBSYNC_CACHE")"
    local current_time="$(date +%s)"
    local mutt_count=0
    local icon="󰇮"
    # Loop through each mailbox directory
    for mailbox in "$MAIL_DIR"/*; do
        if [ -d "$mailbox" ]; then
            # Manually specify folders instead of using brace expansion
            for folder in "$mailbox/INBOX" "$mailbox/Junk"; do
                if [ -d "$folder/new" ]; then
                    # Count the number of files in the 'new' directory
                    mutt_count=$(($mutt_count + $(find "$folder/new" -type f | wc -l)))
                fi
            done
        fi
    done
    [ $((current_time - update_mutt_time)) -gt 86400 ] && icon="󱏣"
    [ "$mutt_count" -gt 0 ] && icon="󰛏"
    mutt="${icon}${mutt_count}"
}

update_newsboat() {
    local NEWS_CACHE="$HOME/.cache/newsboat.num"
    local update_newsboat_time=$(stat -c "%Y" "$NEWS_CACHE")
    local current_time=$(date +%s)
    local UPDATE_FREQUENCY=14400 # 4H
    local news_count="$(cat $NEWS_CACHE)"
    local icon=""
    [ $((current_time - update_newsboat_time)) -gt 86400 ] && news_count=?
    newsboat="${icon}${news_count}"
}

update_calcurse() {
    local DAY="28"
    local calen_count="$(calcurse -d "$DAY" | grep '^[0-9]' | wc -l)"
    local icon=""
    calcurse="${icon}${calen_count}"
}

update_wttr() {
    local WTTR_CACHE="$HOME/.cache/wttr"
    local update_wttr_time="$(stat -c "%Y" "$WTTR_CACHE")"
    local current_time="$(date +%s)"
    local icon=""
    local wttr_result=""
    [ $((current_time - update_wttr_time)) -gt 86400 ] && wttr_result=""
    wttr_result="$(sed 's/ //g; s/\+//' $WTTR_CACHE)"
    [ ! -f "$WTTR_CACHE" ] || [ -z "$wttr_result" ] && icon="󰨹"
    wttr="${icon}${wttr_result}"
}

# modules that don't update on their own need to be run at the start for getting their initial value
update_volume; update_microphone; update_brightness; update_pacman; update_newsboat; update_calcurse; update_wttr

display () {
    local space=" "         # ` `(U+2009) is the Thin Space
    local delimiter_home="["
    local delimiter_end="]"
    local separator="]["
    printf "%s" "${delimiter_home}${wttr}${separator}${calcurse}${space}${newsboat}${space}${mutt}${separator}${pacman}${space}${ttylogin}${space}${uptime}${separator}${root}${space}${home}${separator}${memory}${space}${cpu}${space}${temperature}${space}${fanmode}${separator}${wifi}${space}${ethernet}${separator}${brightness}${space}${microphone}${space}${volume}${separator}${battery}${space}${bluetooth}${separator}${time}${delimiter_end}"
}

# SIGNALLING
# trap	"<function>;display"		"RTMIN+n"
# to update it from external commands
## kill -m "$(cat /tmp/damblocks)"
# where m = 34 + n
trap	"update_bluetooth;display"	"RTMIN"     # -34 udev.rules
trap	"update_battery;display"  	"RTMIN+1"
trap	"update_volume;display"	  	"RTMIN+2"   # -36 .local/bin/audio
trap	"update_microphone;display"	"RTMIN+3"   # -37 .local/bin/audio
trap	"update_brightness;display"	"RTMIN+4"   # -38 .local/bin/bright
#trap	"update_usb;display"	    "RTMIN+5"   # -39 udev.rules
trap	"update_pacman;display"	    "RTMIN+6"   # -40 .local/bin/checkupdates-cron
trap	"update_mutt;display"	    "RTMIN+7"   # -41
trap	"update_newsboat;display"   "RTMIN+8"   # -42
trap	"update_calcurse;display"   "RTMIN+9"   # -43
trap	"update_wttr;display"       "RTMIN+10"   # -44

while true
do
	sleep 1 & wait && {
		# to update item ever n seconds with a offset of m
		## [ $((sec % n)) -eq m ] && udpate_item
		[ $((sec % 5 )) -eq 0 ] && update_time 	# update time every 5 seconds
		[ $((sec % 10)) -eq 0 ] && update_battery
		[ $((sec % 10)) -eq 0 ] && update_bluetooth
		[ $((sec % 10)) -eq 0 ] && update_ethernet
		[ $((sec % 10)) -eq 0 ] && update_wifi
		[ $((sec % 5)) -eq 0 ] && update_temperature
		[ $((sec % 5)) -eq 0 ] && update_fanmode
		[ $((sec % 5)) -eq 0 ] && update_cpu
		[ $((sec % 5)) -eq 0 ] && update_memory
		[ $((sec % 60)) -eq 0 ] && update_home
		[ $((sec % 60)) -eq 0 ] && update_root
		#[ $((sec % 60)) -eq 0 ] && update_usb
		[ $((sec % 900)) -eq 0 ] && update_uptime
		[ $((sec % 60)) -eq 0 ] && update_ttylogin
		[ $((sec % 60)) -eq 0 ] && update_mutt

		# how often the display updates ( 5 seconds )
		[ $((sec % 5 )) -eq 0 ] && display

        # cronjob
		#[ $((sec % 1800 )) -eq 0 ] && "$HOME/.local/bin/mbs" # mbsync
		sec=$((sec + 1))
	}
done
